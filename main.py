import discord
from discord import LoginFailure

import settings
from core.impersonator import imagine, upscale, upscale_max, variate, reroll
from core.listener import set_mj_interaction_target, persist_message_posted_by_bot


intents = discord.Intents.default()
intents.message_content = True
MJR = discord.Bot(intents = intents)



@MJR.event
async def on_ready():
    print(f"\n{settings.SLOGAN} {MJR.user} !\n")

@MJR.command(description="Make MJR says something")
async def whisper(ctx, sentence: discord.Option(str)):
    await ctx.respond(f"{settings.LOG_PREFIX} 🙋 {sentence}")


@MJR.command(description="This command is a wrapper of MidJourneyAI")
async def lucky_imagine(ctx, prompt: discord.Option(str)):
    if settings.USE_MESSAGED_CHANNEL:
        settings.DISCORD_CHANNEL_ID = ctx.channel.id
    if "@" in prompt:
        await ctx.respond(f"{settings.LOG_PREFIX} **@** is a reserved character, pls avoid it")
    else:
        response = imagine(prompt)
        if response.status_code >= 400:
            await ctx.respond(f"{settings.LOG_PREFIX} 😔 Failed to imagine because {response.json()}")
        else:
            await ctx.respond(f"{settings.LOG_PREFIX} 🖍️ yo <@{ctx.author.id}> pls see results in <#{settings.DISCORD_CHANNEL_ID}>")


@MJR.command(description="Upscale one of images generated by MidJourney")
async def lucky_upscale(ctx, index: discord.Option(int), clear_target: discord.Option(bool) = False):
    if index <= 0 or index > 4:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Invalid argument, pick from 1 to 4")
        return

    if settings.TARGET_ID == "":
        await ctx.respond(f'{settings.LOG_PREFIX} 😔 You did not set target. To do so reply to targeted message with {settings.MJR_TARGET_MATCH}')
        return

    if settings.USE_MESSAGED_CHANNEL:
        settings.DISCORD_CHANNEL_ID = ctx.channel.id
    response = upscale(index, settings.TARGET_ID, settings.TARGET_HASH)
    if clear_target:
        settings.TARGET_ID = ""
    if response.status_code >= 400:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Request has failed; please try later")
        return

    await ctx.respond(f"{settings.LOG_PREFIX} 🖍️ Your image is being prepared, please wait a moment...")


@MJR.command(description="Upscale to max targeted image (should be already upscaled using mj_upscale)")
async def lucky_upscale_to_max(ctx, clear_target: discord.Option(bool) = False):
    if settings.TARGET_ID == "":
        await ctx.respond(f'{settings.LOG_PREFIX} 😔 You did not set target. To do so reply to targeted message with {settings.MJR_TARGET_MATCH}')
        return

    if settings.USE_MESSAGED_CHANNEL:
        settings.DISCORD_CHANNEL_ID = ctx.channel.id

    response = upscale_max(settings.TARGET_ID, settings.TARGET_HASH)
    if clear_target:
        settings.TARGET_ID = ""
    if response.status_code >= 400:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Request has failed; please try later")
        return

    await ctx.respond(f"{settings.LOG_PREFIX} 🖍️ Your image is being prepared, please wait a moment...")

@MJR.command(description="Reroll targeted image")
async def lucky_reroll(ctx, clear_target: discord.Option(bool) = False):
    if settings.TARGET_ID == "":
        await ctx.respond(f'{settings.LOG_PREFIX} 😔 You did not set target. To do so reply to targeted message with {settings.MJR_TARGET_MATCH}')
        return

    if settings.USE_MESSAGED_CHANNEL:
        settings.DISCORD_CHANNEL_ID = ctx.channel.id

    response = reroll(settings.TARGET_ID, settings.TARGET_HASH)
    if clear_target:
        settings.TARGET_ID = ""
    if response.status_code >= 400:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Request has failed; please try later")
        return

    await ctx.respond(f"{settings.LOG_PREFIX} 🖍️ Your image is being prepared, please wait a moment...")


@MJR.command(description="Make variation given index after target has been set")
async def lucky_variate(ctx, index: discord.Option(int), clear_target: discord.Option(bool) = False):
    if index <= 0 or index > 4:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Invalid argument, pick from 1 to 4")
        return

    if settings.TARGET_ID == "":
        await ctx.respond(f'{settings.LOG_PREFIX} 😔 You did not set target. To do so reply to targeted message with {settings.MJR_TARGET_MATCH}')
        return

    if settings.USE_MESSAGED_CHANNEL:
        settings.DISCORD_CHANNEL_ID = ctx.channel.id

    response = variate(index, settings.TARGET_ID, settings.TARGET_HASH)
    if clear_target:
        settings.TARGET_ID = ""
    if response.status_code >= 400:
        await ctx.respond(f"{settings.LOG_PREFIX} 😔 Request has failed; please try later")
        return

    await ctx.respond(f"{settings.LOG_PREFIX} 🖍️ Your image is being prepared, please wait a moment...")


@MJR.event
async def on_message(message):
    if message.content == "": return
    if message.author.bot:
        await persist_message_posted_by_bot(message)

    if message.content and message.content.lower().startswith(settings.MJR_TARGET_MATCH.lower()):
        await set_mj_interaction_target(message)

try:
    MJR.run(settings.MJR_TOKEN)
except LoginFailure as e:
    print(f"Failed to login as MJR {e}")
